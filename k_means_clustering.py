# -*- coding: utf-8 -*-
"""K-means clustering

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cLAGJztpbVoyjdxGDNE7qG4H9s5XKISj
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler

import warnings
warnings.filterwarnings('ignore')

my_data = pd.read_csv("/content/depression_ml.csv",header=0, delimiter=",")
my_data.head()

my_data  = my_data.drop(['Timestamp', 'Gender'], axis = 1)
my_data

from sklearn import preprocessing
import numpy as np
oh = preprocessing.OneHotEncoder()
le = preprocessing.LabelEncoder()

selected_col = list(my_data.columns)
selected_col

to_delete = [2,3,7,18]

selected_col = np.delete(selected_col, to_delete).tolist()
selected_col

my_data[selected_col]

my_data[selected_col] = my_data[selected_col].apply(le.fit_transform)
my_data

"""# **Applying K Means**"""

clusters= range(1,11)
wcss = []

for k in clusters:
    model=KMeans(n_clusters=k)
    model.fit(my_data)
    prediction=model.predict(my_data) 
    wcss.append(model.inertia_)

plt.figure(figsize = (10,5))
plt.plot(clusters,wcss,'bx-', c = 'Red', markersize = 8 ) 
plt.title('The Elbow Method')
plt.xlabel('Number of Clusters(K)')
plt.ylabel('WCSS')    #Within cluster sum of squares
plt.grid(True, color = 'gray', linestyle = '-')
plt.show()

clusterNum = 3 
k_means = KMeans(init = "k-means++", n_clusters = clusterNum, n_init = 12)
k_means.fit(my_data)



labels = k_means.labels_
print(labels)

my_data["Clus_km"] = labels
my_data.head()

k_means_cluster_centers = k_means.cluster_centers_
k_means_cluster_centers

my_data.groupby('Clus_km').mean()

plt.scatter(my_data['Age'], my_data['On a scale of 1-100, how would you express this feeling?'], s= 100, c=labels.astype(np.float), alpha=0.5)

plt.ylabel('On a scale of 1-100, how would you express this feeling?', fontsize=10)
plt.xlabel('Age', fontsize=10)

plt.show()

#Initialize the plot with the specified dimensions.
fig = plt.figure(figsize=(12 , 8))

colors = np.array(['red', 'green', 'blue'])
red_patch = mpatches.Patch(color='red', label='Cluster 1')
green_patch = mpatches.Patch(color='green', label='Cluster 2')
blue_patch = mpatches.Patch(color='blue', label='Cluster 3')
black_patch = mpatches.Patch(color='black', label='Centroids')




cluster1 = my_data[my_data["Clus_km"]==0]
cluster2 = my_data[my_data["Clus_km"]==1]
cluster3 = my_data[my_data["Clus_km"]==2]           




plt.scatter(cluster1['Age'], cluster1['On a scale of 1-100, how would you express this feeling?'],color='green')
plt.scatter(cluster2['Age'], cluster2['On a scale of 1-100, how would you express this feeling?'],color='red')
plt.scatter(cluster3['Age'], cluster3['On a scale of 1-100, how would you express this feeling?'],color='blue')


plt.scatter(k_means.cluster_centers_[:,3], k_means.cluster_centers_[:,2],color='black',marker='o',label='centroid', s= 200)
plt.legend(handles=[red_patch, green_patch, blue_patch, black_patch])

