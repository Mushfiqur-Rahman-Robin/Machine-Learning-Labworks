# -*- coding: utf-8 -*-
"""Linear Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nd1emhlQyS-055h-e5aSwCX3U8ftsHrk
"""

import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np

import warnings
warnings.filterwarnings('ignore')

my_data = pd.read_csv("/content/depression_ml.csv",header=0, delimiter=",")
my_data.head()

my_data = my_data.drop(['Timestamp', 'Gender'], axis = 1)
my_data

my_data.describe()

my_data.isnull().sum()

my_data.columns

from sklearn import preprocessing
oh = preprocessing.OneHotEncoder()
le = preprocessing.LabelEncoder()

selected_col = list(my_data.columns)
to_delete = [2,3,7,18]

selected_col = np.delete(selected_col, to_delete).tolist()
selected_col

my_data[selected_col] = my_data[selected_col].apply(le.fit_transform)
my_data

Y = my_data['On a scale of 1-100, how would you express this feeling?']
X = my_data['Age']

plt.scatter(X, Y, color = 'blue')

plt.xlabel("Age")
plt.ylabel("Feeling")
plt.show()

X = my_data['How long did you sleep last night?(in hours)']
Y = my_data['On a scale of 1-100, how would you express this feeling?']

plt.scatter(X, Y, color = 'blue')

plt.xlabel("Sleep (in hour)")
plt.ylabel("Feeling")
plt.show()

import seaborn as sns
import scipy as stats

corr = my_data.corr()
corr

plt.figure(figsize=(25,20))
sns.heatmap(corr,annot=True,cmap='Reds')

my_data.plot(x = 'Age', y = 'On a scale of 1-100, how would you express this feeling?', kind="bar",figsize=(20, 15), color = 'black')

sns.set_style('whitegrid')
sns.set(rc={'figure.figsize':(12,6)})
sns.scatterplot(x = my_data['How long did you sleep last night?(in hours)'],  y = my_data['On a scale of 1-100, how would you express this feeling?'], color = 'r')
plt.title('Feeling Vs Sleep',size = 15)
plt.xlabel('Sleep (in hours)', size = 12)
plt.ylabel('Feeling', size = 12)
plt.figure(figsize=(15, 15), dpi=80)
plt.show()

sns.set_style('whitegrid')
sns.set(rc={'figure.figsize':(12,6)})
sns.scatterplot(x = my_data['Age'],  y = my_data['On a scale of 1-100, how would you express this feeling?'], color = 'r')
plt.title('Feeling Vs Age',size = 15)
plt.ylabel('Feeling', size = 12)
plt.xlabel('Age', size = 12)
plt.figure(figsize=(15, 15), dpi=80)
plt.show()

sns.regplot(x='Age',y='On a scale of 1-100, how would you express this feeling?',data = my_data,color='r')  #regression plot
plt.ylim(0,)

sns.regplot(x = 'How long did you sleep last night?(in hours)', y = 'On a scale of 1-100, how would you express this feeling?',data = my_data,color='r')  #regression plot
plt.ylim(0,)

from scipy import stats

pearson_coef,p_value = stats.pearsonr(my_data['Age'], my_data['On a scale of 1-100, how would you express this feeling?']) 
print(pearson_coef,"\n", p_value)

pearson_coef,p_value = stats.pearsonr(my_data['How long did you sleep last night?(in hours)'], my_data['On a scale of 1-100, how would you express this feeling?']) 
print(pearson_coef,"\n", p_value)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error

X = X.values.reshape(-1,1)
Y = Y.values

train_X, val_X, train_y, val_y = train_test_split(X, Y, random_state = 0)

Y

regression = LinearRegression()
regression.fit(train_X, train_y)

pred_y = regression.predict(val_X)
df = pd.DataFrame({'Actual': [i for i in val_y], 'Predicted': [k for k in pred_y]})  #Actual score vs predicting score 
df

regression.intercept_

regression.coef_

line = regression.coef_*X + regression.intercept_
sns.set(rc={'figure.figsize':(12,6)})
#Plotting for the test data
plt.scatter(X, Y)
plt.plot(X, line);
plt.show()

regression.score(X,Y)
print('The R-Square is: ', regression.score(X,Y))  #deriving R-Squared value

compare_scores = pd.DataFrame({'Actual Score': val_y, 'Predicted Score': pred_y})
compare_scores

compare_scores.plot(kind='bar', figsize=(18,12), color=['black', 'red'], title= "Comparison between Actual and Predicted Score Values")

print('Mean absolute error: ',mean_absolute_error(val_y,pred_y))

Sleep = [8.00]
answer = regression.predict([Sleep])
print("Feelings = {}".format(answer[0]))

